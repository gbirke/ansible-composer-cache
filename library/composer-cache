#!/usr/bin/env python

from ansible.module_utils.basic import *
import os.path
import os
import json
import shutil

def get_cache_path(module):
    cache_dir  = module.params['cache_dir']
    lockfile   = module.params['lockfile']

    try:
        lockfile_handle = open(lockfile)
        data = json.load(lockfile_handle)
        lockfile_handle.close()
    except IOError:
        module.fail_json(msg="lockfile '%s' cannot be opened." % lockfile)

    if not "hash" in data:
        module.fail_json(msg="No hash was found in %s" % lockfile)

    return os.path.join(cache_dir, data['hash'])

def main():
    module = AnsibleModule(
        argument_spec = dict(
            cache_dir=dict(required=True),
            lockfile=dict(default="composer.lock"),
            vendor_dir=dict(default="vendor"),
            force=dict(default=False)
        )
    )

    vendor_dir = module.params['vendor_dir']
    force      = module.params['force']
    
    if os.path.isdir(vendor_dir):
        if force:
            try:
                shutil.rmtree(vendor_dir)
            except IOError, OSError:
                module.fail_json(msg="Vendor directory '%s' could not be deleted" % vendor_dir)
        else:
            module.exit_json(changed=False, vendor_src=vendor_dir, vendor_cache=get_cache_path(module))

    cache_path = get_cache_path(module)

    if not os.path.isdir(cache_path):
        try:
            os.mkdir(cache_path)
        except OSError:
            module.fail_json(msg="Could not create '%s'" % cache_path)

    try:
        os.symlink(cache_path, vendor_dir)
        module.exit_json(changed=True, vendor_src=vendor_dir, vendor_cache=cache_path)
    except IOError:
        module.fail_json(msg="Could not link %s to %s" % (vendor_dir, cache_path))


main()

